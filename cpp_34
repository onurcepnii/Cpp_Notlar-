
------------------
Perfect Forwarding
------------------

	template <typename T>
	void func(T&&)	// böyle parametrelere Universal Reference diyoruz.
	{

	}


Forwarding Reference iki farklı şekilde karşımıza çıkıyor.

1)Fonksiyon şablonunun parametresinin bu şekilde bulunması
2)Auto type deduction ile

	template <typename T>
	void func(T&& r)
	{

	}

	int main()
	{
		auto &&r =
	}


Fakat dikkat eğer "volatile", "const" gibi bir specifier varsa artık bu Universal Reference değil.

	template <typename T>
	void func(std::vector<T> &&)	// Universal Reference değil

Universal Reference olması için parametrenin doğrudan T&& şeklinde olması gerekir.

================================================

Dikkat!

Örnek:

	template <typename T>
	class Myclass {

	public:
		void foo(T&&);	// ###
	};

### : bu Universal Reference değil.

Neden?
Çünkü burda zaten template parametresi karşılığı template argümanı belli olduğunda, örneğin int gibi, bu fonksiyonun parametresi int&& olacak.

Yani bu fonksiyonda bir tür çıkarımı yok. Burada bir çıkarım mekanizması yok. 

Dolayısıyla bu fonksiyonun parametresi Universal Reference değil, R value reference.

================================================

*** ÇOK ÖNEMLİ ***

	template <typename T>
	class Vector {

		public:
			void push_back(const T&);
			void push_back(T&&);

			template <typename U>
			void emplace_back(U&&);	// ##
	};

## : burada Universal Reference(U&&) var. Çünkü bu bir member template. emplace_back'e gönderilen argüman ya da argümanlardan çıkarım yapılacak. 


================================================



Universal Reference ve Perfect Forwarding Arasındaki Bağlantı Ne?
-----------------------------------------------------------------

void foo(Myclass&) { std::cout << "Myclass&\n"; }
void foo(const Myclass&&) { std::cout << "const Myclass&\n"; }
void foo(Myclass&&) { std::cout << "Myclass&&\n"; }
void foo(const Myclass&&) { std::cout << "const Myclass&&\n"; }

template <typename T>
void call_foo(T&& x)
{
	std::forward<T>(x)	// #
}

int main()
{
	Myclass m;
	const Myclass cm;

	foo(m);
	foo(cm);
	foo(std::move(m));
	foo(std::move(cm));
	std::cout << "\n\n";

	call_foo(m);
	call_foo(cm);

}


# : std::forward ile oluşturulan ifade eğer fonksiyonun parametre değişkeni, bu fonksiyona L value gelmişse bu ifade yine L value oluyor. 
Fakat fonksiyona gönderilen R value ise bu ifade R value oluyor. Bunu da conditionally olarak R value'ye dönüştürüyor.

std::move, ona ne gönderirsek bize r value olarak döndürüyor. Fakat std::forward ona r value gönderirsek r value, l value gönderirsek l value.

Normalde biz direk şöyle yazsaydık:
	
	template <typename T>
	void call_foo(T&& x)
	{
		x // doğrudan x'i kullansaydık x bir isim olduğu için l value olacaktı.

		std::move(x);	// x, rvalue veya lvalue olması fark etmeksizin şuan std::move r value döndürecek.

		std::forward<T>(x);	// ###
	}

### :  Eğer burada r value gelmişse bu ifade r value olacak. Bu da ne demek? call_foo'ya gönderilen argümanın hem constluğunu hem de value kategorisini korumuş oluyoruz.

---------------------------

Bir unique ptr nesnesi oluşturup bize o nesneyi veren make_unique diye bir fabrika fonksiyonu var.

Diyor ki sen bana argümanları gönder, ben senin bana gönderdiğin argümanların value kategorisini ve constluğunu koruyarak 
new ifadesi ile dinamik ömürlü bir nesne oluşturayım ve o nesnenin hayatını kontrol edecek bir unique ptr döndüreyim.

işte bunun yapılması için perfect forwarding gerekiyor.

	template <typename T, typename ...Args>
	std::unique_ptr<T> MakeUnique(Args&& ...args)
	{
		return std::unique_ptr(new T(std::forward<Args>(args)...));
	} 

dinamik ömürlü bir nesne oluştururken örneğin T bir sınıf ise T'nin ctor'u çağırılması gerekir. Bu parametre paketindeki parametreler kullanılarak ctor argümanlarını alacak.


---------------------------

*Ufak bir hatırlatma*

	template <typename T>
	void bar(T&& x)
	{
		//eger gelen arguman L value ise
		// T ==> Myclass&
		// x ==> Myclass&
		//
		//eger gelen arguman R value ise
		// T ==> Myclass
		// x ==> Myclass&&
	}


////////////////

#include <iostream>
#include <type_traits>
#include <type_traits>

template <typename T>
void bar(T&& x)
{
	std::is_lvalue_reference<T>::value // bool olarak true, bu bir compile time sabiti. lval ref türü değilse false.
}


Static If
---------
Runtime'da ki if ile karıştırmayalım, eğer bu if'e bir constant expression' u argüman olarak verirsek, o zaman derleyici if'in doğru kısmındaki kodu alacak. 
Eğer buradaki ifade yanlışsa if'in yanlış kımsındaki kodu derleyecek.

C'de ki conditional compiling'in çok daha gelişmiş hali.

sentaksı;

	if constexpr(std::is_lvalue_reference<T>::value) {
		foo(x);
	}
	else {
		foo(std::move(x));
	}

	böylece l value ise l value olarak, r value ise r value olarak gönderebiliyoruz.


daha sonra detaylı inceleyeceğiz bu if'i.


------------------------------------------------


-------------------
	Type Traits
-------------------
Meta function'lardan oluşan, C++'ın standard kütüphanesinin bir bileşenidir.

Type Traits'de bulunan varlıklar tamamen compile time'a ilişkin.

Meta function: Compile time'da çalışan fonksiyon. Fakat burada kullandığımız fonksiyon kelimesini C++ sentaksındaki fonksiyon anlamında kullanmıyoruz.
Bir ya da birden fazla inputu var, ve o input karşılığı bize bir veya birden fazla output var.

Fonksiyonlar değer üretir fakat meta functions değer üretmek zorunda değil.

Meta function'lar farklı kategorilerde sıralanabilir fakat en tipik 2 tane kategori;

	- Input olarak bir type alır, output olarak bir type verir

	- Sen bana bir tür vereceksin, ben sana bu tür ile ilgili bilgi veren bilgi vereceğim. ve bu bilgi tipik olarak boolean bir value
	(Örneğin sen bana bir tür vereceksin ben sana o türün ptr olup olmadığını söyleyeceğim.)


Type Traits kütüphanesi hem tür hesaplayan hem de değer hesaplayan meta fonksiyonlardan oluşuyor.


00:55

Integral Constant Sınıfı
-------------------------

	template<class T, T v>	// #
	struct integral_constant {
		static constexpr T value = v;
		using value_type = T;
		using type = integral_constant;	// using injected-class-name
		constexpr operator value_type()const noexcept { return value; }
		constexpr value_type operator()() const noexcept { return value; }	// C++14
	};


# : Birinci template parametresi tür parametre, ikinci template parametresi bu türden value. yani şöyle düşünelim ===> integral_constant<char,'a'>

Fakat en çok kullanılan specializationlar;

	integral_constant<bool, true>
	integral_constant<bool, false>

Verbositeyi ortadan kaldırmak için bunlara eş isim verebiliriz. Hatta standard kütüphane vermiş;

	using true_type = integral_constant<bool, true>;
	using false_type = integral_constant<bool, false>;


	int main()
	{
		integral_constant<int, 5> x;
		integral_constant<int, 9> y;

		constexpr auto v1 = x + y;
		constexpr auto v2 = x() + y();
	}


------------------------------------------

İki Önemli Örnek: biri tür hesaplamaya yönelik, diğeri değer hesaplamaya yönelik.

(1)
// bir türün pointer türü olup olmadığını compile time'da sınamak

	template <typename T>
	struct isPointer : std::false_type {
		
	};

	template <typename T>
	struct isPointer<T*>std::true_type{};

	int main()
	{
		isPointer<int>::value 			// false
		isPointer<int*>::value 			// true
		isPointer<int**>::value 		// true
		isPointer<const int*>::value 	// true

	}


bir hile daha var.


	template <typename T>
	struct isPointer : std::false_type {
		
	};

	template <typename T>
	struct isPointer<T*>std::true_type{};

	template <typename T>
	void func(T x)
	{
		if constexpr (isPointer<T>::value) {
			std::cout << "evet pointer turu\n";
		}
		else {
			std::cout << "hayir pointer turu degil\n";
		}
	}

	int main()
	{
		int* p{};

		func(p);
	}


fakat bunun yerine de bir variable template kullansak..



	template <typename T>
	struct isPointer : std::false_type {
		
	};

	template <typename T>
	struct isPointer<T*>std::true_type{};

	template <typename T>
	constexpr bool isPointer_v = isPointer<T>::value;

	template <typename T>
	void func(T x)
	{
		if constexpr (isPointer_v<T>) {
			std::cout << "evet pointer turu\n";
		}
		else {
			std::cout << "hayir pointer turu degil\n";
		}
	}

	int main()
	{
		int* p{};

		func(p);
	}


Bunlar zaten standard meta fonksiyonlar fakat sadece isimlerini biraz degistirdik yazarken.

--------------------------------------------------------------

Şimdi ise std::is_const'u implemente edelim.



	int main()
	{
		using namespace std;

		is_const_v<int>				// false
		is_const_v<const int>		// true

		is_const_v<const int*>		// false ÖNEMLİ!! Çünkü buradaki constluk low level constluk. Pointer'in kendisi const değil.

		is_const_v<int* const>		// true
	}


/////////////////////////////////

	template <typename T>
	struct isConst : std::false_type {};

	template <typename T>
	struct isConst<const T> : std::true_type {};

	// değişken şablonumuzu da oluşturalım
	template <typename T>
	constexpr bool isConst_v = isConst<T>::value;


	int main()
	{
		isConst<const int>::value;
	}



/////////////////////

isSame

	template <typename T, typename U>
	struct isSame : std::false_type {};

	template <typename T>
	struct isSame<T, T> : std::true_type {

	};




Type Transformation
-------------------


	int main()
	{
		using namespace std;

		remove_const<const int>::type
		remove_const_t<const int>	// buna alias template deniyor.

		// bu ikisi aynı anlama geliyor
	}


//////////////////////

	template <typename T>
	struct RemoveConst { using type = T; };

	template <typename T>
	struct RemoveConst <const T> { using type = T; };


------------------------------------------

	template <typename T>
	void func(T x, T y);

	int main()
	{
		func(2.3, 19);	// sentaks hatası
	}

 /*func'ın birinci parametresi hangi türden ise ikinci parametre için bir çıkarım yapılmasın, ikinci parametre de o türden olsun*/


bunun için

	template <typename T>
	struct TypeIdentity {
		using type = T;
	};

	template <typename T>
	void func(T x, std::type_identity_t<T> y);

	int main()
	{
		func(12.3,20);
	}


----------------------------------

---------------------
std::remove_reference
---------------------

	template <typename T> struct remove_reference { using type = T; };
	template <typename T> struct remove_reference<T&> { using type = T; };
	template <typename T> struct remove_reference<T&&> { using type = T; };

	template <typename T>
	using remove_reference_t = typename remove_reference<T>::type;

	int main()
	{
		remove_reference_t<int&> x{3};	// int x
		remove_reference_t<int&&> y{5};	// int y 
	}


----------------------------------

İki tane specifier(belirleyici) var. Birisi const, diğeri volatile.

Bunlar tek başına bulunabildikleri gibi birlikte de bulunabilirler.


	template <typename T> struct add_cv { using type = const volatile T; };
	template <typename T> struct add_const { using type = const T; };
	template <typename T> struct_add_volatile { using type = volatile T; };

	template <typename T>
	using add_cv_t = typename add_cv<T>::type;

	template <typename T>
	using add_const_t = typename add_const_cv<T>::type;

	template <typename T>
	using add_volatile_t = typename add_volatile<T>::type;

	int main()
	{
		add_cv_t<int> x1{};
		add_cv_t<int*> x2{};
		add_const_t<int*> x3{};
		add_const_t<const int*> x4{};
		add_volatile_t<int*> x5{};
		add_volatile_t<const int*> x6;
	}


//////////////////////////////////

	template <typename T>
	struct TypeIdentity {
		using type = T;
	};

	template <typename T>
	struct remove_const : TypeIdentity<T> {};

	template <typename T>
	using remove_const_t = typename remove_const<T>::type;



////////////////////////////////////





Türlere İlişkin Sorgulama Yapan Meta Fonksiyonlar
-------------------------------------------------

template <typename T> struct is_void;
template <typename T> struct is_integral;
template <typename T> struct is_floating_point;
template <typename T> struct is_array;
template <typename T> struct is_pointer;
template <typename T> struct is_reference;
template <typename T> struct is_member_object_pointer;
template <typename T> struct is_member_function_pointer;
template <typename T> struct is_enum;
template <typename T> struct is_union;
template <typename T> struct is_class;
template <typename T> struct is_function;
template <typename T> struct is_lvalue_reference;
template <typename T> struct is_rvalue_reference;


-------------------------------------------------


Mülakat Soruları:


	template <typename T>
	void foo(T&& T);

	template <typename T>
	void foo(const T&);


(1) Üstteki template'e her türlü argüman gönderebilir miyim?
Cevap: Evet

(2) Alttaki template'e her türlü argüman gönderebilir miyim?
Cevap: Evet

(3) Peki, ikisi arasındaki fark ne? İkisine de her türlü ifade gönderebiliyorken?

Cevap: Bu fonksiyonun içinde(alttaki) gerçekten gönderilen argümanın const olup olmadığını anlayamayız, r value veya l value olup olmadığını anlayamayız.

Yani bu template içinde gönderilen argümanın value kategorisine bağlı bir kod yazamayız. Dolayısıyla alttaki fonksiyon aldığı argümanı perfect forward edemez. 
Çünkü value kategori kayboldu artık.

Fakat üstteki fonksiyon öyle değil. Bu bir Universal Reference. Tüm argümanları alır ve const olup olmadığını, l value mi r value mi olduğunu bütün bunları 
fonksiyon içinde compile time'da öğrenebiliriz.


	template <typename T>
	void foo(T&& x)
	{
		//std::is_lvalue_reference_v<decltype(x)>
		std::is_rvalue_reference_v<decltype(x)>
	}


	template <typename T>
	void foo(T&& x)
	{

	}


Universal Reference parametre her türlü argümanı kabul ediyor ama bu fonksiyon şablonu veya sınıf şablonu içinde gelen argümanın l value mi r value mi olduğunu, 
const mu non-const mu olduğunu sınama şansına sahibiz. Bu da bize perfect forwarding dışında bize şöyle imkanlar sağlar;
	- l value veya r value'lara kısıtlama
	- const l-r value için ayrı kod kullanma, const olmayan için ayrı kod kullanma



Universal Reference çok iyi bir kavram fakat kafaların karıştığı yer sağ taraf referansı içinde && kullanılıyor, universal reference için de bu kullanılıyor.


	template <typename T>
	void foo(/*std::strng türünden herşeyi kabul etsin*/);

	template <typename T>
	void foo(T&&);

Belirli bir türden her türlü argümanı kabul edecek bir generic fonksiyon yazmak ancak template'i constraint etmek ile mümkün.


------------------------------------------

	template <typename T>
	struct IsArray : std::false_type {};

	template <typename T>
	struct IsArray<T[]> : std::true_type {};

	template <class T, std::size_t N>
	struct IsArray<T[N]> : std::true_type {};

	template <typename T>
	constexpr bool IsArray_v = IsArray<T>::value;

	int main()
	{
		std::cout << std::boolalpha;
		std::cout << IsArray_v<int> << "\n";
		std::cout << IsArray_v<int[]> << "\n";
		std::cout << IsArray_v<const int[]> << "\n";
		std::cout << IsArray_v<int[5]> << "\n";

	}




----------------------------------------------------

** ÖNEMLİ **


	template <class T>
	struct IsFloatingPoint : std::integral_constant<bool,
		std::is_same_v<float, std::remove_cv_t<T>> ||
		std::is_same_v<double, std::remove_cv_t<T>> ||
		std:: is_same_v<long double, std::remove_cv_t<T>>
	{};


fakat şöyle yapsak;

	template <typename T>
	struct isFloatingPoint : std::false_type {};

	template <> struct isFloatingPoint<float> : std::true_type {};
	template <> struct isFloatingPoint<double> : std::true_type {};
	template <> struct isFloatingPoint<long double> : std::true_type {};


Bu implementasyon yanlış olur. Çünkü;

	int main()
	{
		isFloatingPoint<double>::value;	// olması gerektiği gibi true, şuanlık bir sorun yok
		isFloatingPoint<const double>::value; // şimdi false, fakat true olması lazımdı..
	}

Neden?
Çünkü tür sistemi açısından baktığımız zaman double ayrı bir tür, const double ayrı bir tür, volatile double ayrı bir tür, const volatile double ayrı bir tür.

Dolayısıyla bunun tam doğru olması için 2 ihtimal var. Birisi specifier'ları düşürmek, diğeri ise üşenmeden onları da eklemek.(full spec olarak diğerlerinin yanına)


Fakat bunlar yerine yukarıdaki implementasyonu direk uygulayabiliriz.



--------------------------------------

	template <typename T>
	struct isVoid : std::false_type {};

	template <> struct isVoid<void> : std::true_type {};
	template <> struct isVoid<const void> : std::true_type {};
	template <> struct isVoid<volatile void> : std::true_type {};
	template <> struct isVoid<const volatile void> : std::true_type {};


--------------------------------------
02.05

-----------
conditional
-----------


Generic programlama tarafında öyle durumlar var ki
	bir koşula bağlı olarak iki farklı türden birini kullanmamız gerekiyor.

Örnek:

	template <typename T>
	void func(T x)
	{
		sizeof(T)
	}

Diyelim ki T türü bir tamsayı türü ama sizeof değerinin ne olduğuna bağlı olarak short türü veya int türünü kullanmak istiyoruz.

Yani compile time'da ki bir koşula bağlı olarak, o koşulun doğru yada yanlış olmasına bağlı olarak iki farklı türden birini seçmek istiyoruz. 

Standard kütüphanede bu işi yapan "conditional" isimli bir meta function var.

	template<bool B, typename T, typename U>
	struct conditional {
		using type = T;
	};

	template <typename T, typename U>
	struct conditional<false, T, U> {
		using type = U;
	};

	int main()
	{
		conditional<false, int, double>::type
	}

Kullanımına bir örnek daha;

	template <typename T>
	void func(T x)
	{
		std::conditional_t<std::is_floating_point_v<T>, double, int> val {};
		std::cout << typeid(val).name() << "\n";
	}

	int main()
	{
		func(20);
	}

bu demek ki buraya gelen template parametresi floating type ise o zaman elde edeceğimiz tür double türü olacak fakat eğer floating point değilse elde edeceğimiz tür int olacak.



----------------------------------------------

			Variadic Templates

----------------------------------------------

Variadic template aslında bir template kategorisi değil. Fakat kullanılan bir terim.

template parameter pack 
-----------------------
...
yazılırken elipsis tokeni kullanılıyor.


Template Parameter Paketine sahip templateler;

template <typename ...Args>
template <typename ...Types>
template <typename ...Ts>

isim kullanmak zorunda değiliz fakat tipik olarak genelde yukarıdaki isimler tercih ediliyor.


	template <typename ...Ts>
	class Myclass {};

	int main()
	{
		Myclass<> m0;
		Myclass<int> m1;
		Myclass<int, double> m2;
		Myclass<int, double, long> m2;
	}


Non-Type parameter de olabilir;

	template <int ...VALS>
	class Myclass {};

	int main()
	{
		Myclass<> m0;
		Myclass<1> m2;
		Myclass<1, 3, 5, 7> m4;
	}

----------------------------------

	template <class ...Ts>
	void foo(Ts ...params)	// bu fonksiyonun template parametre paketinde kaç tane tür varsa o kadar parametre değişkeni var demek.

	int main()
	{
		foo(2, 3.4, 5L, "onur");
		// aslında şöyle bir çağrı yapmışız gibi;
		void foo<int, double, long, const char*>(int, double, long, const char*)
	}

referans kullanılmadığı için tüm parametreler call by value.

Eğer referans deklaratörü olursa;


	template <class ...Ts>
	void foo(Ts& ...params)

fonksiyonun parametre değişkenleri her biri L value referans olacaktı ve tür çıkarımları da referans olmasına göre yapılacaktı.

	int main()
	{
		int x = 5;
		double dval = 3.4;
		int a[5]{};

		foo(x, dval, a);	// int, double, int[5] yani şu specialization;
							foo<int, double, int[5]>(int&, double&, int (&)[5])
	}


-------------------------------

	template <class ...Ts>
	void foo(Ts&& ...params); // universal reference

bu fonksiyon içinde aldığım argümanların hepsini
(a) perfect forward edebileceğim
(b) gönderilen argümanların value kategorisini öğrenebileceğim ve const olup olmadığını öğrenebileceğim


-------------------------------

sizeof operatörünün variadic bir biçimi daha var.

paketteki öğe sayısını compile time' da size_t türünden elde ediyoruz.
sizeof...()

	tmeplate <typename ...Ts>
	void func(Ts ...args)
	{
		sizeof...(Ts)
		sizeof...(args)
		//her ikisi de geçerli, her ikisinin değeri de aynı, bunlar compile time sabiti.
	}


Eğer variadic parametre varsa bu tek parametre olmak zorunda değil.

	template <typename ...Ts>
	void func(int, int, T ...args)
	{
		constexpr auto sz1 = sizeof...(Ts);
		constexpr auto sz2 = sizeof...(args);

		std::cout << sz1 << sz2;
	}

// bu durumda parametre paketindeki öğe sayısıyla fonksiyonun parametre değişkeni sayısı aynı olmaz.

	int main()
	{
		func(1, 3, 6, 7); // 1 ve 3 ilk baştaki iki tane int'e gidiyor diğer kalanlar variadice gidiyor
	}


Pack Expansion
--------------
template <typename ...Ts>

öyle bağlamlar var ki derleyici pack expansion dediğimiz bir ifadeyi bir başka ifadeye dönüştürüyor.

	template <typename ...Ts>
	class Myclass : public Ts... { // burada dikkat edersek parametre paketinden sonra ellipsis tokeni var, öncesi değil. ve bu pack expansion olan bağlamlardan biri.
	};

bu pack expansion olan bağlamlardan biri. Eğer burada template parametre paketi expand edilmişse(ki ortada zaten bir fonksiyon yok), derleyici pack expansion ifadesini 
virgüllerle ayrılan bir listeye dönüştürüyor.

	struct A{};
	struct B{};
	struct C{};

	Myclass<A, B, C> // tür parametre paketinde 3 tane tür var.

aslında şöyle oluyor;

	struct A{};
	struct B{};
	struct C{};

	template <typename ...Ts>
	class Myclass : public Ts... {

	};

	class Myclass : public A, public B, public C {};

------------------------------------------------

başka bir örnek;

	struct A{};
	struct B{};
	struct C{};

	template <typename ...Ts>
	class Nec{};

	template <typename ...Ts>
	void func(Ts ...params)
	{
		Nec<Ts...> x;
	}

	int main()
	{
		func(2, 5.0, 5L); // Nec<int, double, long> specializationu
	}

------------------------------------------------

örnek;

	template <typename ...Ts>
	class Myclass : public Ts... {
		using Ts::foo ...;
	};

bu da bir pack expansion. ellipsis ten önce using Ts::foo var. Bu durumda derleyici bunu virgüllerle ayrılmış listeye nasıl dönüştürecek? parametre paketinde olan türler 
aslında taban sınıf, her bir taban sınıfın foo isimli(eğer o bir fonksiyonsa) fonksiyonu için bir using declarationu olacak.


	struct A{ void foo(int); };
	struct B{ void foo(double); }
	struct C{ void foo(long); }

	template <typename ...Ts>
	class Myclass : public Ts... {
		using Ts::foo ...;
	};

	int main()
	{
		Myclass<A, B, C> m1; // böyle  bir nesne oluştursak
	}

Myclass öyle bir sınıf ki, bu sınıf A,B,C sınıflarını base class olarak alacak, çoklu kalıtım ile elde etmiş olacağız.

Gelelim using bildirimine. Buradaki bildirim A'nın foo fonksiyonu için using bildirimi, B'nin foo fonksiyonu için using bildirimi, C'Nin foo fonksiyonu için using bildirimi.
Bütün taban sınıflardan gelen foo fonksiyonları türemiş sınıf içinde isimler visible olacak.

	m1.foo(12);	// A'nın foo fonksiyonu
	m1.foo(2.3);// B'nin foo fonksiyonu
	m1.foo(5L);	// C'nin foo fonksiyonu









