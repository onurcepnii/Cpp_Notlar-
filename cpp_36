
Fold Expressions operatörler ile birlikte kullanılıyor.

Unary Fold Expressions ( devam )
----------------------
Ortada katlama ifadesine konu bir operatör olması lazım. Bunun bir binary operatör olması lazım. 

Parantez kullanmak mecburi, fold expression sentaksının gerektirdiği parantez.

Parantezin içinde hangi operatör için fold expression oluşturuyorsak (ingilizcede şöyle diyorlar : unary fold over + operator )
Parametre paketi bu operatörün sağına ya da soluna yazılıyor ve diğer operand olarak ellipsis tokeni olacak.

	(args + ...) -> unary right fold
	
	(p1 + (p2 + (p3 + (p4 + p5)))

	(... + args) -> unary left fold

	(((p1 + p2) + p3) + p4) + p5)


Not : Unary Fold da Binary Fold da binary operatörler ile çalışıyorlar.

Binary Fold Expressions
-----------------------

	(x + ... + args)	// ellipsis parametre paketinin(args) solunda. o zaman bu binary left fold

	(x + p1) + p2) + p3) + p4)

	(args + ... + x)	// ellipsis parametre paketinin sağında, binary right fold.

	(p1 + (p2 + (p3 + (p4 + x)



***
	Bazı kodlarda recursive decrement yöntemi kullanıyorduk. Fold Expressions ile ona gerek kalmıyor çünkü bir defada oluşturmak istediğimiz ifadeyi oluşturuyoruz.

	Toplama fonksiyonu örneği:

		template <typename ...Ts>
		auto sum(const Ts& ...args)
		{
			return (... + args);
		}

		int main()
		{
			auto val = sum();
		}

	derleyici burada hata verir ve der ki expansion boş olmamak zorunda. dolayısıyla eğer bunun geçerli olmasını istiyorsak ya paketi boş bırakmayacağız ya da binary fold kullanacağız.

	Fakat bu durum ilginç ve istisnai;


		template <typename ...Ts>
		auto sum(const Ts& ...args)
		{
			return (... && args);
		}

		int main()
		{
			auto val = foo();		
		}

	burada hata yok ve true değeri elde edilecek. || operatöründe ise false değeri elde edilecek ve yine hata yok. comma (,) operatöründe ise ifadenin türü void olacak. 

	bunlar kural.

***
Yani dilin kuralları diyor ki Unary Fold'da && || , operatörler dışında paket boş olamaz!


-------------------------------------


	template <typename ...Args>
	void print(const Args&... args)
	{
		((std::cout << args << ' '), ...) << '\n';
	}

	int main()
	{
		print(2, 3.5, "onur", "cepni");
	}


-------------------------------------

Ben bu fonksiyona yaptığım çağrıdan öyle bir sonuç elde etmek istiyorum ki son gönderdiğim argümanı return etsin.

Virgül operatörü ile ilgili idiomatic bir yapı;


	template <typename ...Args>
	auto func(Args ...args)
	{
		return (args, ...);
	}

	int main()
	{
		auto x1 = func(3, 5, 4.5);
		auto x2 = func(3, 5, 4, "onur");
	}

Virgül operatörünün değeri sağ operandının değeri. O halde parameter pack'i açtığımızda comma seperated list haline geldiğinde en sağdaki elemanın değerini döndürecek yani en son alldığı argüman.

-------------------------------------

Gelelim Binary Fold'a.

Binary Fold'da ki amaç olaya parametre paketinin dışında bir başka argüman daha sokmak.

	template <typename ...Args>
	constexpr auto sum(Args ...args)
	{
		return (args + ... + 0);
	}

	int main()
	{
		constexpr auto val = sum(); // boş paket gönderiyoruz fakat değeri 0 oluyor sentaks hatası değil. unary fold'da sentaks hatası hatırlayalım.
	}


/////////////////////////////////

	template <typename ...Args>
	void sum(Args ...args)
	{
		(std::cout << ... << args);
	}

	int main()
	{

	}



--------------------------------------------------------------------

43.00

-----------------------------------------

	STL (Standard Template Library)

-----------------------------------------

Generic bir kütüphanedir.

OOP'ye yönelik bir kütüphane değil.

STL'de ki öğeler;

	Başrol Oyuncular : Containers, Iterators, Algorithms

	Yardımcı Oyuncular : container adapters, iterator adapters, function adapters, functions object


Container
---------
Belirli türden veya türlerden değerleri bir arada tutan sınıfların oluşturulması için kullanılacak sınıf şablonları.
Örn: Vector, list, set, unordered map


STL'de ki Container'ları 3 ana gruba ayrılıyor: sequence containers, associative containers, unordered associative containers

sequence containers
-------------------
std::vector
std::deque
std::list
std::forward_list				C++11
std::array						C++11
std::string

associative containers (hepsi tipik olarak BST)
----------------------
std::set
std::multiset
std::map
std::multimap

unordered associative containers
--------------------------------
std::unordered_multiset			C++11
std::unordered_multiset			C++11
std::unordered_map 				C++11
std::unordered_multimap			C++11


NOT
---
bellekte ardışık olması : contiguous 
fakat sequence olması contiguous olduğu anlamına gelmez.
---


Associative containers'larda ekleme sıra ile değil değer ile yapılıyor. 
Unordered Associative Container'larda bir sıralama değil yine değere göre tutuyor ama temel amaçları sıralama ilişkisi olmadan var mı yok mu sorusuna cevap vermek.


Iterators
---------
C/C++'da ki containerların biraz daha soyutlanmış, daha yüksek düzeyde abstraction sağlayan karşılıkları.

Pointerlar dizi elemanlarının adreslerini tutan değişkenler olarak kullanılabilir ve pointerların sağladığı bir interface var. Örneğin ptr bir pointer, *ptr, ++ptr gibi.

Nasıl pointerlar bir interface sağlıyorsa fakat bu interface daha çok dizilere yönelikse iteratorler de aslında ya kendileri de doğrudan pointerlar ya da pointer-like bir arayüze sahip olan sınıflar.

Yani iteratoru pointer like bir interface ile kullanabiliyorum fakat iteratorler containerlarda tutulan öğelerin konumlarını tutan değişkenler.

	Örneğin vector bir container. fakat bir vector'de tutulan bir öğenin konumunu bir değişkende tutmak istesem işte o değişken bir iterator.


Neden Pointerlar Yeterli Olmuyor?
---------------------------------
Örneğin Linked List'lerde öğeler node'larda tutuluyor. Eğer bir node'da ki nesneyi gösteren bir pointeri ++ operatörünün operandı yaparsak lojik olarak bağlı listedeki bir sonraki elemanı gösterir hale gelme ihtimali var mı? Hayır.

Fakat bunlar sınıflar türünden nesnelerse şunu sağlayabiliriz: hangi container'ın iteratoru olursa olsun, o iteratoru içerik operatörünün operandı yaptığımda burada bir fonksiyon çağrılır operator overloading mekanizmasından faydalanırım, bir fonksiyon çağrılı ve o fonksiyon bana bu iteratörün anlattığı konumdaki nesneye erişim sağlar.

Yani ++ operatörünü kullandığımda eğer gerçek pointer ise bir sonraki bellek bloğunun adresini gösterirdi ama şimdi öyle değil, burada operatör overloading mekanizmasından faydalaranak bu işlemi yaptık.

İşte daha yüksek düzeyde soyutlama.

Yani bir iterator nedir?
------------------------
Bir container'da ki nesnenin konumunu tutar. İteratörü dereference edersem o konumdaki nesneye eriştirir.

Hatta öyle bir soyutlama ki container'dan bağımsız. Container ister list olsun ister map olsun ister set olsun, yani ne olursa olsun diyor ki : Ben hangi container'in iteratörü isem o container'da benim değerim olan konumdaki öğeye eriştiririm.

Algoritmalarda özellikle iteratör çok önemli.

Algoritmalar öyle fonksiyon şablonları ki bu fonksiyon şablonlarından instantiation yapıldığında derleyicinin oluşturduğu fonksiyon kodunda, fonksiyonun parametreleri (birden fazla parametre olabilir) iteratör dediğimiz türlerden değişkenler oluyor. 

 
Range
-----
Karşımıza "range" (aralık) kavramı çıkıyor.

[konum1 konum2)

tipik olarak iteratör ile belirtiliyor.

(1) range olma koşulunu sağlaması için konum1'den konum2'ye varılması gerekiyor. O da konum1'in arttırılarak konum2'ye eşit olması hali.

Fakat dikkat konum1'de ki nesne dahil, konum2 de ki nesne hariç. Örneğin p1 ve p2 iki tane konumumuz olsun ve bu range'de ki öğeleri yazdırmak demek p1 de ki nesnenin yazdırılması ve p2'Ye kadar olan nesnelerin yazdırılması fakat p2'de ki nesneye dokunulmaması, yani yazdırılmaması.


----------------------------
Not : STL'in en önemli özelliklerinden biri algoritmaların cross-container işlemleri yapabilmesi. Örneğin bir vector'den bir list'e copy işlemi yapılabilir. Generic soyutlama buna izin veriyor.
----------------------------

numeric başlık dosyasında numerik algoritmalar var, algorithm başlık dosyasında ise diğer tüm algoritmalar var.

Örneğin copy algoritmasına bir bakalım;

Copy algoritması bir range'de ki öğeleri bir konuma, bir konumdan başlayarak kopyalıyor.

	template <typename InIter, typename OutIter>
	OutIter Copy(InIter beg, InIter end, OutIter destbeg)
	{
		while(beg != end) {
			*destbeg++ = *beg++;
		}

		return destbeg;
	}

	int main()
	{
		using namespace std;

		vector<int> ivec{ 3, 5, 3, 5, 7, 8 };
		list<int> ilist{ 1, 4, 6, 2, 7, 9, 6 };

		for(auto i : ilist)
			std::cout << i << " ";
		std::cout << "\n";

		Copy(ivec.begin(), ivec.end(), ilist.begin());
		//Copy<vector<int>::iterator, list<int>::iterator>(ivec.begin(), ivec.end(),ilist.begin());

		//			list<int>::iterator

		for(auto i : ilist)
			std::cout << i << " ";
		std::cout "\n";

	}

02.04

Varsayalım ki container'da bir değer arayacağız. Böyle algoritmalara arama algoritmaları deniyor. Arama algoritmalarının en basiti : find()

// Linear Search
	
	find()

Bir range'de bir öğeyi arıyor, eğer o range'de o öğe varsa o öğenin konumunu döndürüyor. Eğer range'de o öğe yoksa range'in end konumunu döndürüyor.


	template <typename InIter, typename T>
	InIter Find(InIter beg, InIter end, const T& val)
	{
		while(beg != end) {
			if(*beg == val)
				return beg;
			++beg;

		}
		return end;
	}

	int main()
	{
		using namespace std;

		list<int> ilist{ 9, 1, 4, 6, 7, 3, 6, 5 };

		auto iter = find(ilist.begin(), ilist.end(), 3);
		if(iter != ilist.end()) {
			std::cout << "bulundu..." << *iter << "\n";
			*iter = 995;
		}
	}


----------------------------------------

Modern C++'ta sınıfların begin ve end fonksiyonlarının dışında global fonksiyon şablonları da eklendi.
	
	using namespace std;

	vector<int> ivec;

	ivec.begin()	yazmak ile 		begin(ivec)

	arasında bir fark yok, ikisi de aynı konumu döndürüyor.

	Üstelik burada şöyle bir avantaj da var;

	burada using bildirimi olmasaydı ve şöyle bir vector tanımlasaydık;

		std::vector<int> ivec;

		begin(ivec);

	Burada sentaks hatasının olmamasını nedeni ADL(argument dependent lookup). ivec std namespace içinde tanımlanan bir türe ilişkin olduğu için begin ismi std namespace'inde de aranacak.


Global begin() ve end()
-----------------------
Peki neden böyle bir eklemeye gerek duydular? Yani neden global fonksiyon olarak da eklediler?

C dizileri de bir container. Ama onların bir nested type vs. yok ki. Ama global begin ve end fonksiyonları, fonksiyon şablonları olduğu için dizi türleri için bazı araçlardan faydanalabilir.

	int a[] = { 1, 2, 3, 4, 5, 6 };
	int b[20] {};

	örneğin a dizisini b dizisine kopyalamak isteyelim;

	std::copy(a, a + sizeof(a) / sizeof(*a), b);

	yani a.begin() diye bir fonksiyon yok o yüzden eski usül yazdık. 

Fakat eklenen global fonksiyonlar sayesinde a begin ve end fonksiyonlarını kullanabiliyor.

	std::copy(begin(a), end(a), b);



----------------------------------------------------------

İteratörlere geri dönelim.


STL container'ları söz konusu olduğunda iteratörler container'ların nested type'ı.

Yani örneğin vector, set, deque, list vs.vs. bunların hepsinin iteratörleri nested type.

Fakat normal C dizileri söz konusu olduğu zaman onlar için iteratörler gerçek pointerlar.


Demiştik ki iteratörlerin ortak bir interface'i var. Orası tam olarak doğru değil. Örneğin iteratörleri ++ operatörünün operandı yapabiliyoruz fakat -- operatörünün operandı yapabiliyor muyuz? - It depends.
Yani bir iteratörün hangi operasyonlara destek verdiği, hangi operasyonları sağladığı iterator category dediğimiz bir özelliğine bağlı.

	
	int main()
	{
		list<int> mylist(10);

		auto iter = mylist.begin();
		*iter;
		++iter;
		--iter;
		iter + 5;	// sentaks hatası
		iter += 5;	// sentaks hatası
		iter[2] 	// sentaks hatası
	}


	int main()
	{
		vector<int> mylist(10);

		auto iter = mylist.begin();
		++iter;
		iter[3];
		iter + 4;
		iter += 2;
		iter < iter;		hepsi legal
	}

	int main()
	{
		forward_list<int> mylist(10);

		auto iter = mylist.begin();
		--iter;	// sentaks hatası
		...
	}


YANİ iteratörlerin ortak bir interface'i var fakat her iteratör her operasyonu desteklemiyor. Iterator interface'inin hangi operasyonları sağladığı, hangi operasyonlara destek verdiği iteratörün kategorisi dediğimiz bir nitelik ile belirleniyor.

İteratörlerin kategorisi şu 5 kategoriden birine ait olmak zorunda(C++20 ile bir kategori daha eklendi):

-input iterator
-output iterator
-forward iterator
-bidirectional iterator
-random access iterator

-contiguous iterator(C++20)

ve biz bir iteratörün iteratör kategorisinin bunlardan hangisi olduğunu compile time'da da meta functionlarla ya da başka yollarla sınayabiliyoruz.





























